/* global dat,p2 */

(function(p2){

    var disableSelectionCSS = [
        "-ms-user-select: none",
        "-moz-user-select: -moz-none",
        "-khtml-user-select: none",
        "-webkit-user-select: none",
        "user-select: none"
    ];

    p2.RendererGUI = RendererGUI;

    function RendererGUI(renderer){

        this.renderer = renderer;

        if(typeof(dat) === 'undefined'){
            return;
        }

        var gui = this.gui = new dat.GUI();
        gui.domElement.setAttribute('style', disableSelectionCSS.join(';'));

        this.settings = {
            tool: p2.Renderer.DEFAULT,
            fullscreen: function(){
                var el = document.body;
                var requestFullscreen = el.requestFullscreen || el.msRequestFullscreen || el.mozRequestFullScreen || el.webkitRequestFullscreen;
                if(requestFullscreen){
                    requestFullscreen.call(el);
                }
            },

            'paused [p]': false,
            'manualStep [s]': function(){ that.world.step(that.world.lastTimeStep); },
            fps: 60,
            maxSubSteps: 3,
            gravityX: 0,
            gravityY: -10,
            sleepMode: p2.World.NO_SLEEPING,

            'drawContacts [c]': false,
            'drawAABBs [t]': false,
            drawConstraints: false,

            iterations: 10,
            stiffness: 1000000,
            relaxation: 4,
            tolerance: 0.0001,
        };

        var settings = this.settings;

        gui.add(settings, 'tool', p2.Renderer.toolStateMap).onChange(function(state){
            that.setState(parseInt(state));
        });
        gui.add(settings, 'fullscreen');

        // World folder
        var worldFolder = gui.addFolder('World');
        worldFolder.open();
        worldFolder.add(settings, 'paused [p]').onChange(function(p){
            that.paused = p;
        });
        worldFolder.add(settings, 'manualStep [s]');
        worldFolder.add(settings, 'fps', 60, 60*10).step(60).onChange(function(freq){
            that.timeStep = 1 / freq;
        });
        worldFolder.add(settings, 'maxSubSteps', 0, 10).step(1);
        var maxg = 100;

        function changeGravity(){
            if(!isNaN(settings.gravityX) && !isNaN(settings.gravityY)){
                p2.vec2.set(that.world.gravity, settings.gravityX, settings.gravityY);
            }
        }
        worldFolder.add(settings, 'gravityX', -maxg, maxg).onChange(changeGravity);
        worldFolder.add(settings, 'gravityY', -maxg, maxg).onChange(changeGravity);
        worldFolder.add(settings, 'sleepMode', {
            NO_SLEEPING: p2.World.NO_SLEEPING,
            BODY_SLEEPING: p2.World.BODY_SLEEPING,
            ISLAND_SLEEPING: p2.World.ISLAND_SLEEPING,
        }).onChange(function(mode){
            that.world.sleepMode = parseInt(mode);
        });

        // Rendering
        var renderingFolder = gui.addFolder('Rendering');
        renderingFolder.open();
        renderingFolder.add(settings,'drawContacts [c]').onChange(function(draw){
            that.drawContacts = draw;
        });
        renderingFolder.add(settings,'drawAABBs [t]').onChange(function(draw){
            that.drawAABBs = draw;
        });

        // Solver
        var solverFolder = gui.addFolder('Solver');
        solverFolder.open();
        solverFolder.add(settings, 'iterations', 1, 100).step(1).onChange(function(it){
            that.world.solver.iterations = it;
        });
        solverFolder.add(settings, 'stiffness', 10).onChange(function(k){
            that.setEquationParameters();
        });
        solverFolder.add(settings, 'relaxation', 0, 20).step(0.1).onChange(function(d){
            that.setEquationParameters();
        });
        solverFolder.add(settings, 'tolerance', 0, 10).step(0.01).onChange(function(t){
            that.world.solver.tolerance = t;
        });

        // Scene picker
        var sceneFolder = gui.addFolder('Scenes');
        sceneFolder.open();

        // Add scenes
        var i = 1;
        for(var sceneName in this.scenes){
            var guiLabel = sceneName + ' [' + (i++) + ']';
            this.settings[guiLabel] = function(){
                that.setScene(that.scenes[sceneName]);
            };
            sceneFolder.add(settings, guiLabel);
        }
    }

})(p2);